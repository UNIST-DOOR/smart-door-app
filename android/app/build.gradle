apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

// 운영 keystore를 외부 파일에서 불러오기 (없으면 디버그키로 폴백)
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.smartdoormanager"
    defaultConfig {
        applicationId "com.smartdoormanager"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // For react-native-app-auth placeholder
        manifestPlaceholders = [
            appAuthRedirectScheme: "msauth"
        ]
        // 무결성 검증: 기본값(빌드타입별에서 덮어씀)
        buildConfigField "String", "ALLOWED_CERT_SHA256", '""'
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            } else {
                // 폴백: keystore.properties가 없을 때 임시로 디버그키 사용(개발 용도)
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // debug 서명 인증서 SHA-256을 계산하여 BuildConfig에 주입
            def dbgStoreFile = signingConfigs.debug.storeFile
            def dbgStorePass = signingConfigs.debug.storePassword
            def dbgAlias = signingConfigs.debug.keyAlias
            def dbgKeyPass = signingConfigs.debug.keyPassword
            def dbgSha256 = ""
            try {
                if (dbgStoreFile != null && dbgStoreFile.exists()) {
                    def ksType = java.security.KeyStore.getDefaultType()
                    def ks = java.security.KeyStore.getInstance(ksType)
                    ks.load(new FileInputStream(dbgStoreFile), dbgStorePass?.toCharArray())
                    def cert = ks.getCertificate(dbgAlias)
                    if (cert != null) {
                        def md = java.security.MessageDigest.getInstance("SHA-256")
                        def digest = md.digest(cert.getEncoded())
                        dbgSha256 = digest.collect { String.format("%02X", it) }.join(":")
                    }
                }
            } catch (Throwable ignore) {
                // no-op
            }
            buildConfigField "String", "ALLOWED_CERT_SHA256", '"' + dbgSha256 + '"'
        }
        release {
            // 운영: keystore.properties가 존재하면 운영키로 서명
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // release 서명 인증서 SHA-256을 계산하여 BuildConfig에 주입
            def relStoreFile = signingConfigs.release.storeFile
            def relStorePass = signingConfigs.release.storePassword
            def relAlias = signingConfigs.release.keyAlias
            def relKeyPass = signingConfigs.release.keyPassword
            def relSha256 = ""
            try {
                if (relStoreFile != null && relStoreFile.exists()) {
                    def ksType = java.security.KeyStore.getDefaultType()
                    def ks = java.security.KeyStore.getInstance(ksType)
                    ks.load(new FileInputStream(relStoreFile), relStorePass?.toCharArray())
                    def cert = ks.getCertificate(relAlias)
                    if (cert != null) {
                        def md = java.security.MessageDigest.getInstance("SHA-256")
                        def digest = md.digest(cert.getEncoded())
                        relSha256 = digest.collect { String.format("%02X", it) }.join(":")
                    }
                }
            } catch (Throwable ignore) {
                // no-op
            }
            buildConfigField "String", "ALLOWED_CERT_SHA256", '"' + relSha256 + '"'
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
